version: '3.8'

services:
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: sqlserver
    environment:
      SA_PASSWORD: "YourStrong!Passw0rd" # Strong password meeting SQL Server complexity requirements
      ACCEPT_EULA: "Y" # Accept the End User License Agreement
      MSSQL_PID: "Express" # Use Express edition (free tier)
    ports:
      - "1433:1433" # Map host port 1433 to container port 1433
    volumes:
      - sql_data:/var/opt/mssql # Persist SQL Server data outside the container
    healthcheck:
      test: [ "CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P \"YourStrong!Passw0rd\" -Q \"SELECT 1\" || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  polling_api:
    image: polling_api:latest
    build:
      context: .
      dockerfile: OnlinePollingSystem/Dockerfile
    container_name: polling_api
    depends_on:
      sqlserver:
        condition: service_healthy # Wait for SQL Server to be healthy
    environment:
      ConnectionStrings__DefaultConnection: "Server=sqlserver;Database=PollingDB;User Id=sa;Password=YourStrong!Passw0rd;TrustServerCertificate=True;"
      ASPNETCORE_ENVIRONMENT: "Development"
      ASPNETCORE_URLS: "http://+:8090"
    ports:
      - "8090:8090"
    restart: unless-stopped
    volumes:
      - ./OnlinePollingSystem/Ops.Api/appsettings.json:/app/appsettings.json:ro # Optional external config

  react-app:
    build:
      context: ./ops-app
      dockerfile: Dockerfile
    container_name: react-app
    ports:
      - "5173:5173"
    volumes:
      - ./ops-app:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    stdin_open: true
    tty: true
    depends_on:
      polling_api:
        condition: service_started # Ensure backend starts before frontend
    restart: unless-stopped

volumes:
  sql_data: # Named volume for persistent SQL Server data
