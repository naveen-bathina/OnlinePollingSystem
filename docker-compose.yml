version: '3.8'

services:
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: sqlserver
    environment:
      # Strong password meeting SQL Server complexity requirements
      SA_PASSWORD: "YourStrong!Passw0rd"
      # Accept the End User License Agreement
      ACCEPT_EULA: "Y"
      # Use Express edition (free tier)
      MSSQL_PID: "Express"
    ports:
      # Map host port 1433 to container port 1433
      - "1433:1433"
    volumes:
      # Persist SQL Server data outside the container
      - sql_data:/var/opt/mssql
    healthcheck:
      # Ensure SQL Server is ready before the API starts
      test: [ "CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd' -Q 'SELECT 1' || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  polling_api:
    image: polling_api:latest
    build:
      context: .
      dockerfile: OnlinePollingSystem/Dockerfile
    container_name: polling_api
    depends_on:
      sqlserver:
        condition: service_healthy # Wait for SQL Server to be healthy
    environment:
      # Connection string for SQL Server
      ConnectionStrings__DefaultConnection: "Server=sqlserver;Database=PollingDB;User Id=sa;Password=YourStrong!Passw0rd;TrustServerCertificate=True;"
      # ASP.NET Core environment
      ASPNETCORE_ENVIRONMENT: "Development"
      # URLs for HTTP and HTTPS (adjust ports if needed)
      ASPNETCORE_URLS: "http://+:8090"
    ports:
      # Map host port 8080 to container port 8080 (HTTP)
      - "8090:8090"
    restart: always
    volumes:
      # Optional: Mount appsettings.json if external config is needed
      - ./OnlinePollingSystem/Ops.Api/appsettings.json:/app/appsettings.json:ro

volumes:
  sql_data: # Named volume for persistent SQL Server data
